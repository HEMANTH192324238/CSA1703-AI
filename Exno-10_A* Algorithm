import heapq

def a_star(graph, start, goal, heuristic):
    # Priority queue: (f_score, current_node)
    open_set = []
    heapq.heappush(open_set, (0 + heuristic[start], start))

    came_from = {}  # To reconstruct the path
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0

    while open_set:
        _, current = heapq.heappop(open_set)

        if current == goal:
            return reconstruct_path(came_from, current)

        for neighbor, cost in graph[current]:
            tentative_g = g_score[current] + cost
            if tentative_g < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                f_score = tentative_g + heuristic[neighbor]
                heapq.heappush(open_set, (f_score, neighbor))

    return None  # No path found

def reconstruct_path(came_from, current):
    path = [current]
    while current in came_from:
        current = came_from[current]
        path.append(current)
    return path[::-1]

# Example graph: (node: [(neighbor, cost)])
graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('A', 1), ('C', 2), ('D', 5)],
    'C': [('A', 4), ('B', 2), ('D', 1)],
    'D': [('B', 5), ('C', 1)]
}

# Example heuristic (straight-line distance estimate to goal 'D')
heuristic = {
    'A': 7,
    'B': 6,
    'C': 2,
    'D': 0
}

# Run the A* algorithm
start = 'A'
goal = 'D'
path = a_star(graph, start, goal, heuristic)

if path:
    print("Shortest path:", " -> ".join(path))
else:
    print("No path found.")
    print("192324238-Hemanth Kumar")
