from collections import deque

goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

# Directions: Up, Down, Left, Right
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def serialize(state):
    """Convert 2D list to a tuple of tuples for hashing."""
    return tuple(tuple(row) for row in state)

def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_neighbors(state):
    x, y = find_zero(state)
    neighbors = []
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def bfs(start_state):
    queue = deque()
    visited = set()
    parent = {}

    queue.append(start_state)
    visited.add(serialize(start_state))
    parent[serialize(start_state)] = None

    while queue:
        current = queue.popleft()
        if current == goal_state:
            return reconstruct_path(current, parent)

        for neighbor in get_neighbors(current):
            s_neighbor = serialize(neighbor)
            if s_neighbor not in visited:
                visited.add(s_neighbor)
                parent[s_neighbor] = current
                queue.append(neighbor)

    return None

def reconstruct_path(state, parent_map):
    path = []
    while state is not None:
        path.append(state)
        state = parent_map[serialize(state)]
    return path[::-1]

def print_path(path):
    for step, state in enumerate(path):
        print(f"Step {step}:")
        for row in state:
            print(row)
        print()

# Example input
start_state = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]

solution = bfs(start_state)
if solution:
    print_path(solution)
else:
    print("No solution found.")
