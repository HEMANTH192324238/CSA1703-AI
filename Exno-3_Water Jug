from collections import deque
print("19234238-Hemanth Kumar")
# Define the capacities of the two jugs
X = 4  # Capacity of jug X
Y = 3  # Capacity of jug Y
goal = 2  # Target amount

def is_goal(state):
    return state[0] == goal or state[1] == goal

def get_neighbors(x, y):
    neighbors = []

    # Fill Jug X
    neighbors.append((X, y))

    # Fill Jug Y
    neighbors.append((x, Y))

    # Empty Jug X
    neighbors.append((0, y))

    # Empty Jug Y
    neighbors.append((x, 0))

    # Pour X -> Y
    pour = min(x, Y - y)
    neighbors.append((x - pour, y + pour))

    # Pour Y -> X
    pour = min(y, X - x)
    neighbors.append((x + pour, y - pour))

    return neighbors

def bfs():
    visited = set()
    queue = deque()
    parent = {}

    initial_state = (0, 0)
    queue.append(initial_state)
    visited.add(initial_state)
    parent[initial_state] = None

    while queue:
        current = queue.popleft()
        x, y = current

        if is_goal(current):
            return reconstruct_path(current, parent)

        for neighbor in get_neighbors(x, y):
            if neighbor not in visited:
                visited.add(neighbor)
                parent[neighbor] = current
                queue.append(neighbor)

    return None

def reconstruct_path(state, parent_map):
    path = []
    while state is not None:
        path.append(state)
        state = parent_map[state]
    return path[::-1]

def print_path(path):
    for step, state in enumerate(path):
        print(f"Step {step}: Jug X = {state[0]} L, Jug Y = {state[1]} L")
    print("Goal reached!")

# Run the solver
solution = bfs()
if solution:
    print_path(solution)
else:
    print("No solution found.")
